documents:

  document_creation:
    query: >
      MERGE (o:Document:$$APPLICATION$$ {
        Title: $title,
        Description: $description,
        ViewID: "",
        ViewType: "Object",
        Theme: 12
      })
      SET o.Id = CASE WHEN o.Id IS NULL THEN $id ELSE o.Id END
      SET o.Tags = CASE WHEN o.Tags IS NULL THEN [] ELSE o.Id END
      SET o.ViewName = CASE WHEN o.ViewName IS NULL THEN "" ELSE o.ViewName END
      SET o.Nodes = CASE WHEN o.Nodes IS NULL THEN [] ELSE o.Nodes END
      RETURN o as document
    params:
      - title
      - description
      - id
    anchors:
      - APPLICATION
    return:
      - document

  document_link_to_object:
    query: >
      MATCH (o:$$APPLICATION$$) WHERE ID(o)=$node_id
      WITH o
      MATCH (d:Document:$$APPLICATION$$) WHERE ID(d)=$document_id
      SET d.Nodes = CASE WHEN d.Nodes IS NULL THEN [o.AipId] ELSE [ x in d.Nodes WHERE NOT x=o.AipId ] + o.AipId END
      WITH o, d
      MERGE (o)-[:ContainsDocument]->(d)
      RETURN d as document
    params:
      - document_id
      - node_id
    anchors:
      - APPLICATION
    return:
      - document

  document_link_to_aip_object:
    query: >
      MATCH (o:$$APPLICATION$$) WHERE o.AipId=$node_aipId
      WITH o
      MATCH (d:Document:$$APPLICATION$$) WHERE ID(d)=$document_id
      WITH o, d
      MERGE (o)-[:ContainsDocument]->(d)
      SET d.Nodes = CASE WHEN d.Nodes IS NULL THEN [o.AipId] ELSE [ x in d.Nodes WHERE NOT x=o.AipId ] + o.AipId END
      RETURN d as document
    params:
      - document_id
      - node_aipId
    anchors:
      - APPLICATION
    return:
      - document

  get_unuploaded:
    query: >
      MATCH (d:Document:$$APPLICATION$$)
      WHERE NOT "Uploaded" IN d.Tags
      RETURN d as document
    anchors:
      - APPLICATION
    return:
      - document

  get_objects:
    query: >
      MATCH (d:Document:$$APPLICATION$$)<-[:ContainsDocument]-(o:Object)
      WHERE ID(d)=$document_id
      RETURN DISTINCT o as object
    anchors:
      - APPLICATION
    return:
      - object

  set_upload:
    query: >
      MATCH (d:Document:$$APPLICATION$$)
      WHERE ID(d)=$document_id
      SET d.Tags = [ x in d.Tags WHERE NOT x="Uploaded to OpenLegacy" OR x="Pending" ] + "Uploaded to OpenLegacy"
      RETURN d as document
    params:
      - document_id
    anchors:
      - APPLICATION
    return:
      - document

  set_pending:
    query: >
      MATCH (d:Document:$$APPLICATION$$)
      WHERE ID(d)=$document_id
      SET d.Tags = [ x in d.Tags WHERE NOT x="Pending" ] + "Pending"
      RETURN d
    params:
      - document_id
    anchors:
      - APPLICATION
    return:
      - document
